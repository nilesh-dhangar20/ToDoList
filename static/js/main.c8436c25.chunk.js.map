{"version":3,"sources":["Componenet/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","input","setinput","List","localStorage","getItem","console","log","JSON","parse","getData","array","setarray","togglebtn","settogglebtn","EditItems","setEditItems","setList","map","elem","id","name","allinputdata","Date","getTime","toString","alert","useEffect","setItem","stringify","className","type","placeholder","value","onChange","event","target","title","onClick","ele","index","editItemget","find","editItem","updatedArray","filter","deleteOneItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA2KeA,EAxJF,WAST,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAxBd,WACZ,IAAIG,EAAOC,aAAaC,QAAQ,QAEhC,OADAC,QAAQC,IAAIJ,GACRA,EACOK,KAAKC,MAAML,aAAaC,QAAQ,SAGhC,GAiBwBK,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAkCd,mBAAS,MAA3C,mBAAOe,EAAP,KAAkBC,EAAlB,KAqBMC,EAAU,WACZ,GAAKhB,EAGA,GAAIA,IAAUY,EACfD,EACID,EAAMO,KAAI,SAACC,GACP,OAAIA,EAAKC,KAAOL,EACL,2BAAKI,GAAZ,IAAkBE,KAAMpB,IAErBkB,MAGfjB,EAAS,IACTY,GAAa,OAEZ,CACD,IAAMQ,EAAe,CAAEF,IAAI,IAAIG,MAAOC,UAAUC,WAAYJ,KAAMpB,GAClEW,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KAEpBpB,EAAS,SAlBTwB,MAAM,6BA8CdC,qBAAU,WACNvB,aAAawB,QAAQ,OAAQpB,KAAKqB,UAAUlB,MAC7C,CAACA,IAiBJ,OACI,mCACI,sBAAKmB,UAAU,6BAAf,UACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,wBAAf,UACI,oBAAIA,UAAU,aAAd,kCACA,sBAAKA,UAAU,wEAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,6BAA6BE,YAAY,kBAAkBC,MAAOhC,EAAOiC,SA1F3G,SAACC,GAChBjC,EAASiC,EAAMC,OAAOH,UA2FEpB,EAAY,mBAAGiB,UAAU,gDAAgDO,MAAM,WAAWC,QAAUrB,IAAgB,mBAAGa,UAAU,sDAAsDO,MAAM,aAAaC,QAASrB,YAQnO,qBAAKa,UAAU,OAAf,SAGQnB,EAAMO,KAAI,SAACqB,EAAKC,GACZ,OACI,mCACI,qBAAKV,UAAU,gCAAf,SACI,sBAAKA,UAAU,uFAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBS,EAAIlB,OAC3B,mBAAGS,UAAU,qCAAqCO,MAAM,aACxDC,QAAS,kBAvChC,SAAClB,GACd,IAAIqB,EAAc9B,EAAM+B,MAAK,SAACvB,GAC1B,OAAOA,EAAKC,KAAOA,KAGvBN,GAAa,GACbZ,EAASuC,EAAYpB,MACrBL,EAAaI,GAgCoCuB,CAASJ,EAAInB,KAD1B,eAID,mBAAGU,UAAU,wCAAwCO,MAAM,cAAcC,QAAS,kBArEnG,SAAClB,GACnB,IAAMwB,EAAejC,EAAMkC,QAAO,SAACN,GAC/B,OAAOnB,IAAOmB,EAAInB,MAEtBR,EAASgC,GAiEkHE,CAAcP,EAAInB,mBAWrI,qBAAKU,UAAU,MAAf,SACI,qBAAKA,UAAU,gBAAf,SACI,wBAAQA,UAAU,wBAAwBQ,QAxE5C,WACd1B,EAAS,IACTE,GAAa,IAsEG,iCCxJTiC,EARH,WACV,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8436c25.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport \"../App.css\";\r\n\r\n// get data from local storage afler saving in local storage;\r\nconst getData = () => {\r\n    let List = localStorage.getItem('list');\r\n    console.log(List);\r\n    if (List) {\r\n        return JSON.parse(localStorage.getItem('list'))\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst Todo = () => {\r\n\r\n    //first state to save input changes on input button\r\n    // to show list downside\r\n    // to change button add and edit in input filed\r\n    // to save edit items on the same list not creating another one\r\n\r\n\r\n\r\n    const [input, setinput] = useState(\"\");\r\n    const [array, setarray] = useState(getData());  \r\n    const [togglebtn, settogglebtn] = useState(true);\r\n    const [EditItems, setEditItems] = useState(null);\r\n\r\n     \r\n    // input change function which user type are setting in setinput\r\n\r\n    const inputEvent = (event) => {\r\n        setinput(event.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  //whenvever we click on add button set list call \r\n  // if there is nothing in the list items or user does write any thing then it will alert\r\n  // else if  ,if there is editing of any list items then it will run\r\n  // else if normal add click items added\r\n\r\n\r\n\r\n\r\n    const setList = () => {\r\n        if (!input) {\r\n            alert(\"please write items first\");\r\n        }\r\n        else if (input && !togglebtn) {\r\n            setarray(\r\n                array.map((elem) => {\r\n                    if (elem.id === EditItems) {\r\n                        return { ...elem, name: input };\r\n                    }\r\n                    return elem;\r\n                })\r\n            )\r\n            setinput(\"\");\r\n            settogglebtn(true);\r\n        }\r\n        else {\r\n            const allinputdata = { id: new Date().getTime().toString(), name: input };\r\n            setarray([...array, allinputdata]);\r\n\r\n            setinput(\"\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // whenever we click on delete icons of list then it delete\r\n\r\n    const deleteOneItem = (id) => {\r\n        const updatedArray = array.filter((ele) => {\r\n            return id !== ele.id;\r\n        });\r\n        setarray(updatedArray);\r\n    }\r\n\r\n\r\n    // whenever we click on remove all button it will delete all items\r\n\r\n    const RemoveAll = () => {\r\n        setarray([]);\r\n        settogglebtn(true);\r\n    };\r\n\r\n\r\n\r\n    //we are storing list items on localstroge even if we refrese it will not disaable\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"list\", JSON.stringify(array));\r\n    }, [array]);\r\n\r\n\r\n//when we are edditing an items find item by id \r\n\r\n    const editItem = (id) => {\r\n        let editItemget = array.find((elem) => {\r\n            return elem.id === id;\r\n        });\r\n\r\n        settogglebtn(false);\r\n        setinput(editItemget.name);\r\n        setEditItems(id);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5 text-center\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-10 input_items\">\r\n                        <h1 className=\"text-white\">List your Items Here</h1>\r\n                        <div className=\" col input_items_div d-flex align-items-center justify-content-center\">\r\n                            <input type=\"text\" className=\"todo_input mt-4 pt-2 pb-2 \" placeholder=\"  add your item\" value={input} onChange={inputEvent} />\r\n                            {\r\n                                togglebtn ? <i className=\"fas fa-plus add-btn text-black add_icons pt-4\" title=\"add item\" onClick={ setList}></i> : <i className=\"fas fa-edit add-btn me-1  add_icons text-black pt-4\" title=\"edit items\" onClick={setList}></i>\r\n                            }\r\n                            {/* <i className=\"fas fa-plus add-btn text-white add_icons\" title=\"add item\" onClick={setList}></i> */}\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"row \">\r\n\r\n                    {\r\n                        array.map((ele, index) => {\r\n                            return (\r\n                                <>\r\n                                    <div className=\"col col-md-10 show_items_list\">\r\n                                        <div className=\" col-md-4 offset-md-4 showlist d-flex align-items-center justify-content-center mt-3\">\r\n                                            <h3 className=\" me-3\">{ele.name}</h3>\r\n                                            <i className=\"fas fa-edit add-btn me-2 edit_icon\" title=\"edit items\"  \r\n                                            onClick={()=>editItem(ele.id)}\r\n                                           > </i>\r\n\r\n                                           <i className=\"fas fa-trash-alt add-btn delete_icon \" title=\"delete item\" onClick={() => deleteOneItem(ele.id)}></i>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col col-md-10\">\r\n                        <button className=\"btn mt-3  todo_button\" onClick={RemoveAll}>clear All</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n//  onClick={editItem(ele.id)}","import React from 'react'\nimport Todo from './Componenet/Todo'\nconst App = () => {\n  return (\n    <div>\n      <Todo/>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}